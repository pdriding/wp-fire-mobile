"use client";

import NextLink from "next/link";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { usePathname, useRouter } from "next/navigation";
import { IoCallOutline } from "react-icons/io5";
import { scroller } from "react-scroll";

// Throttle function to limit scroll event frequency
const throttle = (func, limit) => {
  let lastFunc;
  let lastRan;
  return (...args) => {
    if (!lastRan) {
      func(...args);
      lastRan = Date.now();
    } else {
      clearTimeout(lastFunc);
      lastFunc = setTimeout(() => {
        if (Date.now() - lastRan >= limit) {
          func(...args);
          lastRan = Date.now();
        }
      }, limit - (Date.now() - lastRan));
    }
  };
};

export default function Header() {
  const pathname = usePathname();
  const router = useRouter();
  const headerRef = useRef(null);
  const [headerHeight, setHeaderHeight] = useState(0);
  const [activeSection, setActiveSection] = useState("home");

  // Custom scrollspy hook
  const useScrollSpy = (ids, offset = 0) => {
    const [activeId, setActiveId] = useState("home");

    useEffect(() => {
      const handleScroll = throttle(() => {
        const scrollPosition = window.scrollY;
        const viewportHeight = window.innerHeight;

        // Check if we're near the top of the page
        if (scrollPosition < viewportHeight * 0.3) {
          setActiveId("home");
          return;
        }

        // Find which section is currently in view
        for (const id of ids) {
          const element = document.getElementById(id);
          if (!element) continue;

          const rect = element.getBoundingClientRect();
          const elementTop = rect.top + scrollPosition;
          const elementBottom = elementTop + rect.height;

          // Check if the element is in the viewport
          if (
            scrollPosition >= elementTop - viewportHeight * 0.3 &&
            scrollPosition < elementBottom - offset
          ) {
            setActiveId(id);
            break;
          }
        }
      }, 100);

      window.addEventListener("scroll", handleScroll);
      handleScroll(); // Initial check

      return () => window.removeEventListener("scroll", handleScroll);
    }, [ids, offset]);

    return activeId;
  };

  useEffect(() => {
    const updateHeight = () => {
      if (headerRef.current) {
        setHeaderHeight(headerRef.current.clientHeight);
      }
    };
    updateHeight();
    window.addEventListener("resize", updateHeight);
    return () => window.removeEventListener("resize", updateHeight);
  }, []);

  // Use custom scrollspy
  const sectionIds = ["home", "about-section", "contact-section"];
  const currentActive = useScrollSpy(sectionIds, headerHeight);

  useEffect(() => {
    setActiveSection(currentActive);
  }, [currentActive]);

  // Force 'home' active near top on manual scrolls
  useEffect(() => {
    const handleScroll = throttle(() => {
      if (window.scrollY < headerHeight) {
        setActiveSection("home");
      }
    }, 100);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, [headerHeight]);

  useEffect(() => {
    const handlePathChange = () => {
      window.scrollTo(0, 0);
      const hash = window.location.hash;
      if (hash) {
        setTimeout(() => {
          scroller.scrollTo(hash.slice(1), {
            duration: 500,
            smooth: true,
            offset: -headerHeight,
          });
          setActiveSection(hash.slice(1));
        }, 200);
      } else {
        setActiveSection("home");
      }
    };

    handlePathChange();
  }, [pathname, headerHeight]);

  const isRouteActive = (to, exact = false) => {
    if (exact) return pathname === to;
    return pathname.startsWith(to);
  };

  const handleHomeClick = (e) => {
    if (pathname === "/") {
      e.preventDefault();
      scroller.scrollTo("home", {
        duration: 500,
        smooth: true,
        offset: -headerHeight,
      });
      if (window.location.hash !== "") {
        router.replace("/");
      }
      setTimeout(() => setActiveSection("home"), 550);
    }
  };

  const handleHashClick = (e, hash) => {
    const sectionId = hash.slice(1);
    const urlWithHash = "/" + hash;
    if (pathname === "/") {
      e.preventDefault();
      scroller.scrollTo(sectionId, {
        duration: 500,
        smooth: true,
        offset: -headerHeight,
      });
      router.replace(urlWithHash);
      setTimeout(() => setActiveSection(sectionId), 550);
    } else {
      e.preventDefault();
      router.push(urlWithHash);
    }
  };

  const baseLinkClass =
    "inline-block no-underline font-normal text-[1rem] hover:text-[#cf711f] active:text-[#b24f00] focus:outline-none focus:ring-0";

  const getLinkClass = (section) => {
    return `${baseLinkClass} ${
      activeSection === section ? "text-[#cf711f]" : "text-[#333]"
    }`;
  };

  return (
    <header ref={headerRef} className="sticky top-0 z-50 w-full bg-white">
      <div className="w-full max-w-[70rem] mx-auto px-[1rem] h-[10vh] flex items-center justify-between">
        <NextLink href="/" onClick={handleHomeClick} className="block">
          <Image
            src="/images/wp-fire-logo-removebg.png"
            alt="WP Fire logo"
            width={0}
            height={0}
            sizes="9vh"
            className="h-full w-auto object-contain"
          />
        </NextLink>

        <nav className="flex items-center flex-grow justify-end pr-[2rem]">
          <ul className="list-none flex items-center gap-[3rem]">
            <li>
              <NextLink
                href="/"
                className={getLinkClass("home")}
                onClick={handleHomeClick}
              >
                Home
              </NextLink>
            </li>

            <li>
              <NextLink
                href="/services"
                className={`${baseLinkClass} ${
                  isRouteActive("/services", true)
                    ? "text-[#cf711f]"
                    : "text-[#333]"
                }`}
              >
                Services
              </NextLink>
            </li>

            <li>
              <NextLink
                href="/#about-section"
                className={getLinkClass("about-section")}
                onClick={(e) => handleHashClick(e, "#about-section")}
              >
                About
              </NextLink>
            </li>

            <li>
              <NextLink
                href="/#contact-section"
                className={getLinkClass("contact-section")}
                onClick={(e) => handleHashClick(e, "#contact-section")}
              >
                Contact
              </NextLink>
            </li>
          </ul>
        </nav>

        <div className="flex gap-[1rem] items-center justify-center">
          <div className="border-l border-gray-400 h-[10px] mr-[2.5px]" />
          <IoCallOutline size={32} className="text-[#e53935]" />
          <div className="flex flex-col">
            <span className="text-[0.875rem] font-normal text-[#555]">
              CALL US NOW
            </span>
            <h2 className="text-[1.25rem] font-semibold">0333 880 2993</h2>
          </div>
        </div>
      </div>
    </header>
  );
}
